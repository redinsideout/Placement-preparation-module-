/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
   public ListNode rotateRight(ListNode head, int k) {
        ListNode dummy = head;
        //for empty or list with 1 node return them as such         
        if(head == null || head.next == null)
            return head;
		//length starts from 1 to include last element
        int n = 1;
		//goes until last element
        while(dummy.next!=null){
            dummy = dummy.next;
            n++;
        }
        //Set the last node to head to form circular linked list
        dummy.next = head;
        dummy = head;
        // Rotating n*a times would just give the same linked list so remove them
        k = k%n;
        //  Since we rotate right we have to find the (n-k)th element which is the head      
        for(int i = 0;i<n-k-1;i++){
            dummy = dummy.next;
        }
        //Break the cycle by keeping head as (n-k) and setting (n-k-1)th element as tail
        head = dummy.next;
        dummy.next = null;
        return head;
    }
} 
